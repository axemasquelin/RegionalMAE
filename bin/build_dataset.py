# coding: utf-8 
'''
""" MIT License """
    Authors:
        1. Axel Masquelin
    Description: Build a pandas dataframe to be loaded utilized by a dataloader.
    Pre-building the dataframe using bin/build_dataset provides a way to bypass
    the dataset builder in PulmonaryMAE repository and allows for a combination approach
    to dataset building. 
    Copyright (c) 2022
'''
#----------------Libaries---------------#
from argparse import Namespace
import pandas as pd
import numpy as np
import argparse
import logging
import sys, os
#---------------------------------------#
def get_attributes(filename) -> dict:
    """
    Description: 
    -----------
    Parameters:
    files: list
        list containing the names of files and parameters
    delim: str
        defines separation string to generate attribute list
    ext: str
        string describing the file types
    --------
    Returns:
    att: dic
        dictionary of attributes
    """
    attributes = filename.split("_")

    return {
        'FILE': filename,
        'PID': attributes[0] if len(attributes) > 0 else 'NA',
        'BREATH': attributes[1] if len(attributes) > 1 else 'NA',
        'KERNEL': attributes[2] if len(attributes > 2) else 'NA',
        'LOC': attributes[3] if len(attributes > 3) else 'NA',
        'DATASET': attributes[4].split('.') if len(attributes > 4) else 'NA',
        'LABEL': attributes[5].split('.')[0] if len(attributes > 5) else 'Original',
        'EXT': filename.split('.')[-1],
    }

def main(config):
    """
    Generates Pandas Dataframe containing all files matching extension within a user provided directory. The Pandas dataframe 
    is then saved and structured such that a pytorch.DataLoader can utilize it to load images
    ----------
    Parameters
    config: dict
        dictionary containing the directory where the dataset files exist, the extension of the files of interest, and the savepath
        for the csv file that is to be generated by the pandas dataframe
    """
    for directory in config['directories']:
        for root, dirs, files in os.walk(directory+ '/*' + config['ext'], topdown=True):
            file_attributes = [get_attributes(filename) for filename in files]
    
    df = pd.DataFrame(file_attributes)
    df.to_csv(os.getcwd() + config['savepath'])

def build_config(args) -> dict:
    """
    Description: Generates a dictionary based on command line arguments
    """
    config= {
        'dir': args.dir,
        'ext': args.ext,
        'savepath': args.savepath
        }
    
    return config


def build_parser() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser()

    # Experiment Settings
    parser.add_argument('--dirs', type=list, required=True, help='List of dataset Directories to create a dataset from')
    parser.add_argument('--ext', type=list, default=['Original','Tumor-only','Parenchyma-only'])
    parser.add_argument('--savepath', type=str, default= './PulmonaryMAE/')

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    parser = build_parser()
    config = build_config(args=parser.parse_args())
    main(config)
